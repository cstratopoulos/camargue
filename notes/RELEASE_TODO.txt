While re-reading and re-editing code, all vector allocations in constructors
should be placed in appropriate try blocks. Previous approach of overloading
an operator bool is the zombie struct solution which is not ideal. 
I think that the constructors should 'try' allocations or calls to Concorde
and throw exceptions (rather than throw and catch and set success/failure) and
these exceptions should be caught by the entry point function?
See:
	try function blocks and the herb sutter gotw page on them
	read boost documentation:
	http://www.boost.org/community/error_handling.html

Key idea: Exceptions can be propagated instead of having error handlers 
littered throughout the code

Possible alternate approach: exceptions are reserved for container 
resize/insert calls and constructors. Other than that, use rval system.

maybe come up with a generic profiler function that operates on a list of
pairs corresponding to variables and a string for their name, and also somehow
stores an indicator for if we should report percentage/ratio/average
IDEA: have a few vectors, e.g. representing times, cuts, num pivots, something
like that. BUT instead take an initializer list of strings which will
be the lookup key for a map to int or double...or map to int/double
and string where string can be the lookup key for total or average,
etc. 
