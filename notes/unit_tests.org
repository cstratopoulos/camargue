* Idea and Approach
All new and existing units/modules of the code need to be thoroughly
unit tested. The final code should ship with a test bed consisting of
TSPLIB instances and, where necessary, specific LP solutions or tours
for running certain tests. These will all be implemented using Catch.

** Types of tests to write
*** White box testing
Roughly speaking, these should test facilities in ways that would
occur during normal program use where the routine may succeed or fail
in a way that does not terminate program execution. 
*** Black box (hidden) testing
These tests should be informed by the structure of the program and
attempt to explore as many paths/decision trees in the code as
possible, taking care to specifically invoke exit failure type
situations that would throw an exception or an rval of one. These
could be implemented with the [[Tagging system]]. 
** Tagging system
Catch offers [[https://github.com/philsquared/Catch/blob/master/docs/test-cases-and-sections.md][tags]] for labelling tests. Tests should be tagged
according to the following principles.
- Natural tags :: these are the facility or facilities being tested,
                  e.g., odd component blossoms would be tagged as
                  separator, blossom, fast blossom,
                  odd-component. Also where applicable, function names
                  should be tagged. 
- Hiden/Unhidden :: black box tests should have their names prefixed
                    with a '.' to indicate they are not run on the
                    command line by default. 
- Tiny/Normal :: Tests on around 30-40 nodes or less should be tagged
                 as tiny. With these, there may be some additional
                 option to generate visual output, or to test cut
                 separators to a high degree of specificity, e.g.,
                 specifying the number and structure of cuts found. 
With the use of these tags, it will be possible to run tests from the
command line using syntax like:
- ./PSEP '[separators]' :: run all separation routine tests
- ./PSEP '[fastblossom]' :: run tests of odd component and
     GH-blossoms. 
- ./PSEP '[tiny]' :: run all tiny tests
etc. 
** Testing scripts
*** DONE Add 'make test' recipe'
    CLOSED: [2016-11-20 Sun 15:01]
Usage of the Makefile should allow for either invoking 'make' to do a
standard build of the project, or 'make test' to build
CATCH_MAIN. This is already partially implemented with the
PSEP_DO_TEST macro. Hence 'make test' should probably just call a sed
script to define or undef PSEP_DO_TEST and then call make. This could
probably be done by 'sed [substition]' && remove temporary files. 
* Testing categories
** Separators
Each separator should be tested in the following ways:
- Tiny :: Test should AT LEAST specify the exact number of cuts to be
          found, and if possible explicitly describe their structure. 
- Found :: These tests are ones that would return an rval of zero:
           cuts matching the template were found. 
- Not found :: rval of two: successful exit from function with no cuts
               found. 
- Different tour :: These tests should invoke separators on the same
                    lp solution with different tours to highlight
                    sensitivity of primal separation to incumbent
                    tour. 
For each of these there should be 2-5 tests at least. 
*** SECs
**** DONE Write make_subtour test in concorde
CLOSED: [2016-11-20 Sun 14:26]
This script effectively generates [[Not found]] tests for any SEC
separation routines by calling concorde to solve over the subtour
polytope and then save the lp solution to file, and then save the
optimal tour to file. 
**** segments
**** standard connect cuts
*** Blossoms
**** TODO Write make_blossom test in cocorde
This should be identical to make_subtour but calls concorde to solve
over the blossom polytope instead. 
**** TODO Fast blossoms
***** TODO Write tests where odd component and GH return the same
***** TODO Write tests where GH gets ones missed by odd component
***** TODO Padberg-Hong
***** TODO Grotschel-Holland
**** TODO Exact blossoms
*** Dominos
**** Candidates
**** CutGraph
*** Safe GMI
