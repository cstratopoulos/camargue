#+STARTUP: indent

* Simple DP TODO list
** TODO Investigate stalling/amount of violation in cuts
With lin318 testing uncovered an instance of an unviolated cut. This
may be happening during normal control flow, causing stalling
** Tooth
*** DONE Add mulitple versions of weak elim for right-adjacent/general
CLOSED: [2016-11-27 Sun 11:33]
*** DONE Adapt weak elim to unsorted (or possibly unmerged?) lists
CLOSED: [2016-11-27 Sun 11:31]
The idea here is to sort AFTER elimination has occurred, which should
net a marginal speedup. Possible approaches:
- Use std::move to merge the lists, record indices of iterators
- Compare the disjoint lists separately
*** TODO Try folding everything into dist elim
Previous attempt to conglomerate everything into distant elim did not
net a speedup, but also put everything in one tooth list. If anything,
this separate approach is only adding time/complexity. Maybe make
everything part of distant elim, but still add teeth to separate lists
- Could also write an inline function that automatically does the elim
  procedure. 
- So few teeth are being eliminated by the final pass of weak elim,
  maybe there is some way to fold that into the detection procedure as
  well.  
** CutControl
*** TODO Add in_subtour_poly to DP time
*** TODO Make it so add_primal_cuts can return rval of 2
** PureCut
*** TODO Possibly rewrite entirely
** Timing
*** TODO Create timers for all subroutines
* DONE Check self dist elim
CLOSED: [2016-11-27 Sun 12:28]
Need to see if any additional teeth can be removed by exhaustively
comparing distant teeth with themselves
* TODO Conjecture: There are no self dist elim teeth to be removed
Testing showed that eliminating distant teeth against each other never
removed an additional tooth. Try and prove the conjecture that this is
always the case. 
* DONE Conjecture(proved): There are no right left teeth to be removed
CLOSED: [2016-11-27 Sun 13:43]
Testing also shows that elimination never occurs with right teeth vs
left teeth. 
- Conjecture: This always occurs
- Proof? (i:s) must be nonzero for some s in S. 
* TODO Try eliminating by 2d-tree regions
The edges used in a simple DP inequality tend to be concentrated in
certain xy-quadrants. Maybe could use 2d-tree to identify regions with
high concentration of fractional edges
* TODO Try for O(mlogn + mnlogn) runtime
- For each root there are at most n bodies giving a light tooth with
  root i
- If these were found w linsub_allcuts, the complexity would be
  O((m+n)logn)
- n calls to this would give O(mnlogn +n^2logn)
- Maybe there is a modified edge capacity under which segment cuts are
  candidate bodies for a tooth with a given root. 


What if there was a node marks guard/wrapper structure that could
automatically mark and unmark them by being passed a predicate function?
* TODO Try to save on re-allocation
In large instances, allocating memory for zones and teeth lists is a
bottleneck. May want to keep the old approach of having the separator
always have those things allocated already?
