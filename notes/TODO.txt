change options to getopt_long

just make timer a namespace and profiler have the void print profile
functions
or maybe re-explore timer class and name class for protection now that
i know how static member vars work.............
maybe come up with a generic profiler function that operates on a list of
pairs corresponding to variables and a string for their name, and also somehow
stores an indicator for if we should report percentage/ratio/average
IDEA: have a few vectors, e.g. representing times, cuts, num pivots, something
like that. BUT instead take an initializer list of strings which will
be the lookup key for a map to int or double...or map to int/double
and string where string can be the lookup key for total or average,
etc. 

make it so that either ABC can take PureCut as a constructor argument,
or ABC has access to purecut.solve() from its interface?

idea: .....maybe just a CCutils.h file for things we need from
concorde along with wrappers? eg.,
struct CC with sub-structs GH (for gomoryhu), cut for st_cut
(including subtour poly)
learn to call CPXaddrowS for multiple cuts

see edgegen.c and edgegen.h, also tsp_call.c for ideas how to use
concorde to build initial edge set

tooth aggregated coefficients: instead of an ecount length vector, 
create a map of type <Int, Double> mapping edges to their coeff
to be aggregated. With some checking: can call increment/decrement
even if the entries have not yet been initialized; they should
default to zero.

LP PREFS AND ENUM PARAMETERS:
Consider making it so that, e.g., the switching prefs member of the LPprefs
class is implemented as
enum SWITCHING{
     LP::PREFS::SWITCHING::DYNAMIC,
     etc,
     etc
};

and it has a member called switching....

NAMESPACE IDEAS:

PSEP 
     LP
	Prefs, Core, Fixing, Pruning

     DATA
	LP, Best, Graphs, Support

     PureCut
	
     ABC
       BBNode, EdgeStats, Constraints	       	


should store reduced costs obtained from the root node. in branch &
cut, if an augmentation takes place, we can fix edges using reduced
costs from the root and the new best tour opt value as the integrality
gap.

previsit should call PureCut.solve(ncount, Plan(Branch), pivstat) in a while
loop, terminating when stat is NOT an augmented tour. If stat is a
fathomed tour and plan is branch, update best tour will NOT be
called. We must
-make calls to prunecuts WITH skiprange, get delset
-pass delset to updater functions
-pass new tour via PSEPlp_x (for comparison with old tour) to updaters
and only then call update best tour. Then re-enter the loop!
