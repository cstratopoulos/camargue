change options to getopt_long

just make timer a namespace and profiler have the void print profile
functions
or maybe re-explore timer class and name class for protection now that
i know how static member vars work.............

make it so only one of PureCut or ABC is initialized, perhaps by
making the member objects be pointers and only one is made non-null
user gets to enter solution paradigm maybe

possibly switch to unique_ptr vectors for segments and blossoms as
well, could be faster for priority queue sorting/inseration

idea: .....maybe just a CCutils.h file for things we need from
concorde along with wrappers? eg.,
struct CC with sub-structs GH (for gomoryhu), cut for st_cut
(including subtour poly)
learn to call CPXaddrowS for multiple cuts

see edgegen.c and edgegen.h, also tsp_call.c for ideas how to use
concorde to build initial edge set

tooth aggregated coefficients: instead of an ecount length vector, 
create a map of type <Int, Double> mapping edges to their coeff
to be aggregated. With some checking: can call increment/decrement
even if the entries have not yet been initialized; they should
default to zero.

 -given that at most two cuts are added per round.....maybe make it so
 that branching would take place after number of rounds leading to the
 addition of atmost K cuts for some K?


LP PREFS AND ENUM PARAMETERS:
Consider making it so that, e.g., the switching prefs member of the LPprefs
class is implemented as
enum SWITCHING{
     LP::PREFS::SWITCHING::DYNAMIC,
     etc,
     etc
};

and it has a member called switching....


CLASSES/GENERIC PROGRAMMING
Could have something like....generic functions for 
template<cut_t cuttype>
basically each cut must support the operations:
	  separate
	  add (to CPLEX)
	  parse (get coeffs for CPLEX)
and could write a specialization of these for each class...


New idea:
previous approach may have been misguided? So we have three cut classes:
	 segments
	 blossoms
	 simpleDP
each of which will have (more or less)
     definition of storage struct
     unique_ptr to best cut found
     functions:
	separate/separate_pq(const int max cutcount)
	parse/get coefficients (get delta)
	add_cut
	cut_call -- wraps all of the above

Thus we just provide
template<typename cut_type>
	public:
	 cut_call
	private:
	 separate/parse/add
	 unique_ptr

and in the header files for segments/blossoms/simpleDP, include a FULL class 
specialization of each
